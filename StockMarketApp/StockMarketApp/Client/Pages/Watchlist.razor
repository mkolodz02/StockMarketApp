@page "/companies/watchlist"
@using Microsoft.AspNetCore.Authorization;
@using Newtonsoft.Json;
@using Syncfusion.Blazor.Buttons;
@using Syncfusion.Blazor.Grids;
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@attribute [Authorize]

<h3>Watchlist</h3>
@if(CompaniesList.Count > 0)
{
    <SfGrid @ref="Grid" DataSource="@CompaniesList" AllowSorting="true" Toolbar=@(new List<string>() {"Search"})>
        <GridEditSettings AllowEditing="false"></GridEditSettings>
        <GridColumns>
            <GridColumn Field="@nameof(CompanyMainDataDto.Logo)" HeaderText="Logo" TextAlign="TextAlign.Center">
                <Template>
                @{
                    var comp = (context as CompanyMainDataDto);
                    <div class="image">
                        <img src="@comp.Logo" alt="Logo"/>
                    </div>
                }
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(CompanyMainDataDto.Ticker)" HeaderText="Ticker" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field="@nameof(CompanyMainDataDto.Name)" HeaderText="Name" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field="@nameof(CompanyMainDataDto.City)" HeaderText="City" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn HeaderText="Actions" TextAlign="TextAlign.Center">
                <Template>
                    @{
                        var comp = (context as CompanyMainDataDto);
                        <SfButton CssClass="e-danger" @onclick="@(() => RemoveFromWatchlist(comp.Ticker))">X</SfButton>
                    }
                </Template>
            </GridColumn>
        </GridColumns>
    </SfGrid>

    <SfButton OnClick="NavigateToDashboard">Return</SfButton>
}
else
{
    <img src="https://upload.wikimedia.org/wikipedia/commons/b/b1/Loading_icon.gif?20151024034921" />
}

@code {
    public SfGrid<CompanyMainDataDto> Grid { get; set; }
    public List<CompanyMainDataDto> CompaniesList { get; set; }
    public List<WatchlistItem> WatchlistItems { get; set; }

    protected async override Task OnInitializedAsync()
    {
        CompaniesList = new List<CompanyMainDataDto>();
        WatchlistItems = new List<WatchlistItem>();

        await GetWatchlistItems();

        foreach(var item in WatchlistItems)
        {
            CompaniesList.Add(await GetCompany(item.CompanyTicker));
        }

    }

    public async Task<CompanyMainDataDto> GetCompany(string ticker)
    {
        var result = await httpClient.GetAsync($"https://localhost:7194/api/stocks/stockInfo/{ticker}");
        var responseBody = await result.Content.ReadAsStringAsync();
        return JsonConvert.DeserializeObject<CompanyMainDataDto>(responseBody);
    }

    public async Task GetWatchlistItems()
    {
        var result = await httpClient.GetAsync("https://localhost:7194/api/watchlist/userWatchlist");
        var responseBody = await result.Content.ReadAsStringAsync();
        WatchlistItems = JsonConvert.DeserializeObject<List<WatchlistItem>>(responseBody);
    }

    public async Task RemoveFromWatchlist(string ticker)
    {
        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to remove this company from watchlist?");
        var deletedItem = CompaniesList.FirstOrDefault(c => c.Ticker.Equals(ticker));

        if (confirmed)
        {
            await httpClient.DeleteAsync($"https://localhost:7194/api/watchlist/removeFromWatchlist/{ticker}");
            CompaniesList.Remove(deletedItem);
            Grid.Refresh();
        }

    }

    public async void NavigateToDashboard()
    {
        await jsRuntime.InvokeVoidAsync("history.back");
    }

}
